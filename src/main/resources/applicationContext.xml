<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"  
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"       
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:context="http://www.springframework.org/schema/context"   
	xmlns:tx="http://www.springframework.org/schema/tx"  
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:task="http://www.springframework.org/schema/task"   
	xsi:schemaLocation="http://www.springframework.org/schema/beans    
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd    
	http://www.springframework.org/schema/aop    
	http://www.springframework.org/schema/aop/spring-aop-3.0.xsd    
	http://www.springframework.org/schema/tx    
	http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-3.0.xsd
	http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd
	http://www.springframework.org/schema/task
	http://www.springframework.org/schema/task/spring-task-3.0.xsd">

	<task:scheduler id="springScheduler" pool-size="10" />
	<!-- 用于增强Spring @Async 注解在异步模式能捕捉到异常日志 -->
	<bean id="handlingAsyncTaskExecutor" class="com.ducetech.framework.context.async.HandlingAsyncTaskExecutor" />
	<!-- 建议只定义@Async注解使用，尽量不用@Scheduled而改用后面的Quartz方式便于文本定义调整定时策略 -->
	<task:annotation-driven executor="handlingAsyncTaskExecutor" scheduler="springScheduler" />

	<bean id="extPropertyPlaceholderConfigurer" class="com.ducetech.framework.context.ExtPropertyPlaceholderConfigurer">
		<property name="basePackages" value="com.ducetech" />
		<property name="locations">
			<list>
				<value>classpath*:/jdbc.properties</value>
				<value>classpath*:/application.properties</value>
			</list>
		</property>
		<property name="ignoreResourceNotFound" value="true" />
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
	</bean>

	<context:component-scan base-package="com.ducetech">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Service" />
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Component" />
		<context:exclude-filter type="annotation" expression="org.springframework.web.servlet.config.annotation.EnableWebMvc" />
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
		<context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
	</context:component-scan>

	<bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
		<property name="slowSqlMillis" value="5000" />
		<property name="logSlowSql" value="true" />
		<property name="mergeSql" value="true" />
	</bean>

	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<!-- 配置初始化大小、最小、最大 -->
		<!-- 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时 -->
		<property name="initialSize" value="${druid.initialSize}" />
		<!-- 最小连接池数量 -->
		<property name="minIdle" value="${druid.minIdle}" />
		<!-- 最大连接池数量 maxIdle已经不再使用 -->
		<property name="maxActive" value="${druid.maxActive}" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${druid.maxWait}" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />

		<!-- 用来检测连接是否有效的sql，要求是一个查询语句。-->
		<property name="validationQuery" value="SELECT 'x'" />
		<!-- 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。 -->
		<property name="testWhileIdle" value="true" />
		<!-- 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。 -->
		<property name="testOnBorrow" value="false" />
		<!-- 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能 -->
		<property name="testOnReturn" value="false" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20" />

		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="log4j" />
		<property name="proxyFilters">
			<list>
				<ref bean="stat-filter" />
			</list>
		</property>

		<property name="useGlobalDataSourceStat" value="true" />
	</bean>

 	<!-- 定时器 -->
 	<!-- <task:scheduled-tasks>   
        <task:scheduled ref="taskJob" method="omitTable" cron="* * 0 * * ?"/>   
	</task:scheduled-tasks>
	  -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="configLocation" value="classpath:MapperConfig.xml"></property>
		<!-- <property name="mapperLocations" value="classpath*:com/ducetech/**/mapper/*.xml" /> -->
	</bean>
	
	<!-- <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">   
          <constructor-arg index="0" ref="sqlSessionFactory" />   
    </bean>  -->
	
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
       <property name="basePackage" value="com.ducetech.*.dao" />
	</bean>

	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<tx:annotation-driven transaction-manager="transactionManager"/>
	<!-- <bean name="memcachedClient"
		  class="net.rubyeye.xmemcached.utils.XMemcachedClientFactoryBean" destroy-method="shutdown">
		<property name="servers">
			<value>127.0.0.1:11211</value>
		</property>
	</bean> -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="2048000"/>
		<!-- resolveLazily 为 false 时，请求一旦被 MultipartResolver 接手，它就会解析请求中的文件，而不必等待后续 controoler 主动从 MultipartRequest 中 getFile。 resolveLazily 为 true 时，只有等后续的 controller 主动调用 MultipartRequest.getFile 才会从原始请求中解析文件。 -->
		<property name="resolveLazily" value="true" />
	</bean>

	<!--hessian server-->
	<bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"/>
	<bean id="helloService" class="com.ducetech.api.remote.impl.HelloServiceImpl"/>
	<bean name="/helloService" class="org.springframework.remoting.caucho.HessianServiceExporter">
		<property name="service" ref="helloService"/>
		<property name="serviceInterface" value="com.ducetech.api.remote.HelloService"/>
	</bean>

	<!-- hessian client -->
	<bean id="helloBean" class="org.springframework.remoting.caucho.HessianProxyFactoryBean">
		<property name="serviceUrl" value="http://127.0.0.1:8080/SSM-Platform/hessian/helloService" />
		<property name="serviceInterface" value="com.ducetech.api.remote.HelloService" />
		<property name="overloadEnabled" value="true"/>
	</bean>

	<import resource="classpath:service/spring-shiro.xml"/>
	<import resource="classpath:service/spring-redis.xml" />
	<!--import resource="classpath:service/spring-mail.xml" /-->
	<!--import resource="classpath:service/spring-schedule.xml" /-->
	<!-- <import resource="classpath:service/spring-activiti.xml"/> -->
</beans>